{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","useEffect","getItem","s","parse","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","key","toDo","toDoText","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems"],"mappings":"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","file":"static/js/app.d1c548ef.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3A3D40\",\n  toDoBg: \"#5C5C60\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport React, { useState, useEffect } from \"react\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { Fontisto } from \"@expo/vector-icons\";\nconst STORAGE_KEY = \"@toDos\";\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const travel = () => setWorking(false);\n  const work = () => setWorking(true);\n  const onChangeText = (payload) => setText(payload);\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n  const saveToDos = async (toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\n    if (s) {\n      setToDos(JSON.parse(s));\n    }\n  };\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you wantto delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm sure\",\n          onPress: async () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            await saveToDos(newToDos);\n          },\n        },\n      ]);\n      return;\n    }\n  };\n  useEffect(() => {\n    loadToDos();\n  }, []);\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 42,\n              fontWeight: \"600\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 42,\n              fontWeight: \"600\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          onSubmitEditing={addToDo}\n          onChangeText={onChangeText}\n          returnKeyType=\"done\"\n          value={text}\n          placeholder={working ? \"Add a To DO\" : \"Where do you want to go?\"}\n          style={styles.input}\n        />\n        <ScrollView>\n          {Object.keys(toDos).map((key) =>\n            toDos[key].working === working ? (\n              <View style={styles.toDo} key={key}>\n                <Text style={styles.toDoText}>{toDos[key].text}</Text>\n                <TouchableOpacity>\n                  <Text onPress={() => deleteToDo(key)}>\n                    <Fontisto name=\"trash\" size={18} color={theme.grey} />\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            ) : null\n          )}\n        </ScrollView>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 18,\n  },\n  toDo: {\n    backgroundColor: theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 20,\n    paddingHorizontal: 40,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n});\n"],"sourceRoot":""}